document.addEventListener("DOMContentLoaded",(function(){function startPollingForImageChanges(){console.log("Starting to poll for image changes");let pollingCount=0;const intervalId=setInterval((()=>{pollingCount++;const imageElements=findCloudinaryImages();imageElements.length>0&&imageElements.forEach((el=>{const imageUrl=el.value||el.src||"";imageUrl&&imageUrl.includes("cloudinary.com/designcenter/image/upload")&&(console.log("Found Cloudinary image URL:",imageUrl),extractAndFillFields(imageUrl),clearInterval(intervalId))})),pollingCount>=20&&(console.log("Giving up polling for image changes after",20,"attempts"),clearInterval(intervalId))}),500)}function findCloudinaryImages(){return[...Array.from(document.querySelectorAll('input[type="text"], input[type="hidden"]')).filter((input=>(input.value||"").includes("cloudinary.com/designcenter/image/upload"))),...Array.from(document.querySelectorAll("img")).filter((img=>(img.src||"").includes("cloudinary.com/designcenter/image/upload"))),...Array.from(document.querySelectorAll("div")).filter((div=>(div.getAttribute("style")||"").includes("cloudinary.com/designcenter/image/upload")))]}function extractAndFillFields(imageUrl){try{console.log("Analyzing URL for extraction:",imageUrl);const universalMatch=imageUrl.match(/\/([^\/]+)\.[a-zA-Z0-9]+$/);if(!universalMatch||!universalMatch[1])return void console.log("Could not extract filename from URL:",imageUrl);const publicId=universalMatch[1];console.log("Extracted public ID:",publicId);const pathMatch=imageUrl.match(/\/upload\/(?:v\d+\/)?(.+)\.[a-zA-Z0-9]+$/),fullPath=pathMatch&&pathMatch[1]?pathMatch[1]:publicId;console.log("Full path/id:",fullPath);let extractedData={id:fullPath,slug:publicId.toLowerCase(),title:publicId,room:"",style:""};if(fullPath.includes("/")){const pathParts=fullPath.split("/");if(pathParts.length>=2){pathParts[0];const room=pathParts[1];let style="",filename="";pathParts.length>=3?pathParts.length>3||"Kitchen"===room||"Furniture"===room?(style=pathParts[2],filename=pathParts[pathParts.length-1]):filename=pathParts[2]:filename=room,extractedData={id:fullPath,slug:filename.toLowerCase().replace(/_/g,"-"),title:filename.replace(/_/g," "),room:"Lighting"===room?"Light":room,style:"Kitchen"===room||"Furniture"===room?style:""}}}console.log("Extracted data from URL:",extractedData),data=extractedData,[100,500,1e3,2e3,3e3].forEach((delay=>{setTimeout((()=>function(data){try{console.log("DOM structure at time of update attempt:"),console.log("Total widget-wrapper elements:",document.querySelectorAll(".widget-wrapper").length);const allLabels=Array.from(document.querySelectorAll("label")).map((l=>l.textContent.trim()));console.log("All found labels:",allLabels);const fields=document.querySelectorAll(".widget-wrapper");let updated=!1;if(console.log("Looking through",fields.length,"potential field containers"),fields.forEach(((field,index)=>{const label=field.querySelector("label");if(!label)return void console.log(`Field ${index}: No label found`);const labelText=label.textContent.trim();console.log(`Field ${index}: Found label "${labelText}"`);const input=field.querySelector("input, select, textarea");input?(console.log(`Field ${index}: Found ${input.tagName} element for "${labelText}". Current value: "${input.value}"`),!input.value||input.value.includes("cloudinary.com")?"ID"===labelText?(console.log(`Attempting to set ID field to "${data.id}"`),setFieldValue(input,data.id),updated=!0,console.log(`After update, ID field value is: "${input.value}"`)):"Slug"===labelText?(console.log(`Attempting to set Slug field to "${data.slug}"`),setFieldValue(input,data.slug),updated=!0,console.log(`After update, Slug field value is: "${input.value}"`)):"Title"===labelText?(console.log(`Attempting to set Title field to "${data.title}"`),setFieldValue(input,data.title),updated=!0,console.log(`After update, Title field value is: "${input.value}"`)):"Room"===labelText&&"SELECT"===input.tagName?data.room&&isValidOption(input,data.room)?(console.log(`Attempting to set Room dropdown to "${data.room}"`),console.log("Available options:",Array.from(input.options).map((o=>o.value))),setSelectValue(input,data.room),updated=!0,console.log(`After update, Room field selected value is: "${input.value}"`)):console.log(`Not setting Room because "${data.room}" is not a valid option`):"Style"===labelText&&"SELECT"===input.tagName&&(data.style&&isValidOption(input,data.style)?(console.log(`Attempting to set Style dropdown to "${data.style}"`),console.log("Available options:",Array.from(input.options).map((o=>o.value))),setSelectValue(input,data.style),updated=!0,console.log(`After update, Style field selected value is: "${input.value}"`)):console.log(`Not setting Style because "${data.style}" is not a valid option`)):console.log(`Field ${index}: Skipping "${labelText}" because it already has a value`)):console.log(`Field ${index}: No input found for label "${labelText}"`)})),!updated){console.log("No fields updated using label approach, trying direct ID matching");const allInputs=document.querySelectorAll("input, select, textarea");console.log("Total input elements found:",allInputs.length),allInputs.forEach((input=>{const id=input.id||"";console.log("Found input element with id:",id),id.includes("id")&&!input.value?(console.log(`Setting input with id ${id} to "${data.id}"`),setFieldValue(input,data.id),updated=!0):id.includes("slug")&&!input.value?(console.log(`Setting input with id ${id} to "${data.slug}"`),setFieldValue(input,data.slug),updated=!0):id.includes("title")&&!input.value?(console.log(`Setting input with id ${id} to "${data.title}"`),setFieldValue(input,data.title),updated=!0):id.includes("room")&&"SELECT"===input.tagName?data.room&&isValidOption(input,data.room)&&(console.log(`Setting select with id ${id} to "${data.room}"`),setSelectValue(input,data.room),updated=!0):id.includes("style")&&"SELECT"===input.tagName&&data.style&&isValidOption(input,data.style)&&(console.log(`Setting select with id ${id} to "${data.style}"`),setSelectValue(input,data.style),updated=!0)}))}if(!updated){console.log("Trying final approach with simpler selectors");const idInputs=document.querySelectorAll('input[id*="id"]'),slugInputs=document.querySelectorAll('input[id*="slug"]'),titleInputs=document.querySelectorAll('input[id*="title"]');idInputs.forEach((input=>{input.value||(setFieldValue(input,data.id),updated=!0)})),slugInputs.forEach((input=>{input.value||(setFieldValue(input,data.slug),updated=!0)})),titleInputs.forEach((input=>{input.value||(setFieldValue(input,data.title),updated=!0)}))}if(updated){console.log("Form fields updated with extracted data");const notification=document.createElement("div");notification.style.position="fixed",notification.style.top="20px",notification.style.right="20px",notification.style.background="#4CAF50",notification.style.color="white",notification.style.padding="10px 20px",notification.style.borderRadius="4px",notification.style.zIndex="9999",notification.textContent="Fields auto-filled from image URL!",document.body.appendChild(notification),setTimeout((()=>{notification.style.opacity="0",notification.style.transition="opacity 0.5s",setTimeout((()=>notification.remove()),500)}),3e3)}else console.log("Failed to update any form fields")}catch(error){console.error("Error updating fields:",error)}}(data)),delay)}))}catch(error){console.error("Error extracting data from URL:",error)}var data}function isValidOption(select,value){for(let i=0;i<select.options.length;i++)if(select.options[i].value===value)return!0;return!1}function setFieldValue(field,value){if(!field||field.value===value)return;field.value=value;const inputEvent=new Event("input",{bubbles:!0}),changeEvent=new Event("change",{bubbles:!0});field.dispatchEvent(inputEvent),field.dispatchEvent(changeEvent);try{const reactProps=field._reactProps;reactProps&&reactProps.onChange&&reactProps.onChange({target:field})}catch(e){}}function setSelectValue(select,value){if(select)for(let i=0;i<select.options.length;i++)if(select.options[i].value===value){select.selectedIndex=i;const changeEvent=new Event("change",{bubbles:!0});select.dispatchEvent(changeEvent);try{const reactProps=select._reactProps;reactProps&&reactProps.onChange&&reactProps.onChange({target:select})}catch(e){}break}}console.log("Auto-fill helper script loaded - Universal version"),new MutationObserver((function(mutations){if(window.location.href.includes("/collections/product-galleries/"))for(const mutation of mutations)if("childList"===mutation.type&&mutation.addedNodes.length>0){for(const node of mutation.addedNodes)if(node.nodeType===Node.ELEMENT_NODE){if("IMG"===node.tagName){const src=node.src||"";src.includes("cloudinary.com/designcenter/image/upload")&&(console.log("Image element detected with Cloudinary URL:",src),extractAndFillFields(src))}const images=node.querySelectorAll("img");for(const img of images){const src=img.src||"";src.includes("cloudinary.com/designcenter/image/upload")&&(console.log("Image element detected with Cloudinary URL:",src),extractAndFillFields(src))}const inputs=node.querySelectorAll("input");for(const input of inputs){const value=input.value||"";value.includes("cloudinary.com/designcenter/image/upload")&&(console.log("Input element detected with Cloudinary URL:",value),extractAndFillFields(value))}}}else if("attributes"===mutation.type&&"value"===mutation.attributeName){const value=mutation.target.value||"";value.includes("cloudinary.com/designcenter/image/upload")&&(console.log("Input value changed to Cloudinary URL:",value),extractAndFillFields(value))}})).observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value","src","style"]}),document.addEventListener("click",(function(e){window.location.href.includes("/collections/product-galleries/")&&(e.target.classList.contains("nc-mediaLibrary-button")||e.target.closest(".nc-mediaLibrary-button")||e.target.classList.contains("CMS_Image_button"))&&(console.log("Media button clicked, will poll for image changes"),setTimeout(startPollingForImageChanges,1e3))})),setTimeout((()=>{if(window.location.href.includes("/collections/product-galleries/")){console.log("Running initial check for Cloudinary images");const imageElements=findCloudinaryImages();imageElements.length>0&&(console.log("Found",imageElements.length,"Cloudinary images on page load"),imageElements.forEach((el=>{const imageUrl=el.value||el.src||"";imageUrl&&imageUrl.includes("cloudinary.com/designcenter/image/upload")&&extractAndFillFields(imageUrl)})))}}),1e3)}));